worker_processes 1;

user nobody nogroup;
pid /tmp/nginx.pid;
error_log /dev/stdout warn;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  use epoll;
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;

  log_format custom '$remote_addr request="$request" status=$status time=${request_time}s '
                    'request_size=$request_length response_size=$bytes_sent';
  access_log /dev/stdout custom;
  sendfile on;
  proxy_max_temp_file_size 0;

  server {
    # if no Host match, close the connection
    listen 80 default_server;

    return 444;
  }

  upstream app_server {
    server web:8000 fail_timeout=0;
  }

  server {
    listen 80;
    server_name search1.helpmanual.io;
    include /etc/nginx/allowed.nginx.conf;

    client_max_body_size 1M;

    keepalive_timeout 2;

    location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # proxy_set_header X-Request-Start $msec;
      proxy_set_header Host $http_host;

      proxy_send_timeout 3;
      proxy_read_timeout 3;
      proxy_connect_timeout 3;
      proxy_redirect off;
      proxy_pass http://app_server;
    }

    location /update/ {
      proxy_set_header Host $http_host;
      # proxy_set_header X-Request-Start $msec;
      proxy_redirect off;
      chunked_transfer_encoding on;
      proxy_buffering off;

      proxy_send_timeout 600;
      proxy_read_timeout 600;
      proxy_connect_timeout 600;

      proxy_pass http://app_server;
    }

    error_page 502 503 504 =503 /maintenance.html;
    location = /maintenance.html {
      root /;
      internal;
    }
  }
}
